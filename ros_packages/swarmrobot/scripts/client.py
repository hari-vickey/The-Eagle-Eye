#!/usr/bin/env python3
"""
Flipkart - Grid 3.0 - Robotics Competition
ROS Node - client.py (yet to be completed)
This node will do the following :
    1. Read the samplesheet.xlsx
    2. Send Goal to the Server using ROS Action
"""
# Importing Required Modules
import os
import math
import rospy
import rospkg
import actionlib
import threading
import pandas as pd
from helper import function
from swarmrobot.msg import msgBot2Action, msgBot2Goal, msgBot2Result
from swarmrobot.msg import msgBot4Action, msgBot4Goal, msgBot4Result

# Class Client
class Client():

    """
    This class has all the required functions to complete the task as
    mentioned in the doc string of this file
    """

    # Constructor
    # Initializing the variables of this class
    def __init__(self):

        #Initialize SimpleActionClientTurtle
        self._ac2 = actionlib.ActionClient('/action_bot2', msgBot2Action)
        self._ac4 = actionlib.ActionClient('/action_bot4', msgBot4Action)

        # Dictionary to Store all the goal handels
        self.goal_no_2, self.goal_no_4 = 0, 0
        self._goal_handles_2, self._goal_handles_4 = {}, {}
        self.city = ""
        self.count = 0

        # Wait for Bots's Action Server
        self._ac2.wait_for_server()
        self._ac4.wait_for_server()
        print("Action Server Up")

        print("waiting for Aruco Markers Detection")
        rospy.sleep(10)
        self.location = function.read_location()
        print(self.location)
        self.read_sheet()
        self.algorithm()

    # Function to read Excel Sheet
    def read_sheet(self):
        """
        This Function will read the excel sheet and sort 
        induct stations
        """
        rp = rospkg.RosPack()
        pkg_path = rp.get_path('swarmrobot')
        sheet = "{}/sheet/Sample_Data.xlsx".format(pkg_path)
        df = pd.read_excel(sheet, index_col=None, na_values=['NA'], usecols = "A:C")
        self.df1 = df[df['Induct Station']==1]
        self.df2 = df[df['Induct Station']==2]

    # Function Send Goal for Bot2
    def send_goal_2(self, *args):
        """
        This function is used to send Goals to Action Server
        """
        # Create a Goal Message object
        goal = msgBot2Goal()
        goal.induct_station = args[0]
        goal.induct_x = args[1]
        goal.induct_y = args[2]
        goal.goal_x = args[3]
        goal.goal_y = args[4]
        goal.city = args[5]
        goal.pkg_id = args[6]
        goal.drop = args[7]
        rospy.loginfo("Goal Sent")
        # self.on_transition - It is a function pointer to a function,
        # which will be called when there is a change of state in the 
        # Action Client State Machine
        goal_handle = self._ac2.send_goal(goal, self.on_transition_2, None)

        return goal_handle


    # Function Send Goal for Bot4
    def send_goal_4(self, *args):
        """
        This function is used to send Goals to Action Server
        """
        # Create a Goal Message object
        goal = msgBot4Goal()
        goal.induct_station = args[0]
        goal.induct_x = args[1]
        goal.induct_y = args[2]
        goal.goal_x = args[3]
        goal.goal_y = args[4]
        goal.city = args[5]
        goal.pkg_id = args[6]
        goal.drop = args[7]
        rospy.loginfo("Goal Sent")
        # self.on_transition - It is a function pointer to a function,
        # which will be called when there is a change of state in the 
        # Action Client State Machine
        goal_handle = self._ac4.send_goal(goal, self.on_transition_4, None)

        return goal_handle

    # Function On_Transition_2
    def on_transition_2(self, goal_handle):
        """
        This function will be called when there is a change of state in the 
        Action Client State Machine
        """
        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.
        result = msgBot2Result()
        ind = 0
        for i in self._goal_handles_2:
            if self._goal_handles_2[i] == goal_handle:
                ind = i + 1
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(ind))

        # Comm State - Monitors the State Machine of the Client 
        # which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(ind) + ": Goal just went active.")

        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(ind) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)
            if result.flag_success == True:
                rospy.loginfo("Goal successfully completed. " + \
                 "Client Goal Handle #: " + str(ind))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(ind))

    # Function On_Transition_4
    def on_transition_4(self, goal_handle):
        """
        This function will be called when there is a change of state in the 
        Action Client State Machine
        """
        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.
        result = msgBot4Result()
        ind = 0
        for i in self._goal_handles_4:
            if self._goal_handles_4[i] == goal_handle:
                ind = i + 1
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(ind))

        # Comm State - Monitors the State Machine of the Client 
        # which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(ind) + ": Goal just went active.")

        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(ind) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)
            if result.flag_success == True:
                rospy.loginfo("Goal successfully completed. " + \
                "Client Goal Handle #: " + str(ind))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(ind))

    # Function Algorithm
    def algorithm(self):
        """
        This function is responsible to complete the entire task.
        It is also combined with multiple control statements to
        get optimal results
        """
        for i in range(0, 25):
            pkgid_1 = self.df1.iloc[i][0]
            ind_stn_1 = int(self.df1.iloc[i][1])
            city_1 = self.df1.iloc[i][2]
            start_1 = (self.location[ind_stn_1][0], self.location[ind_stn_1][1])
            goal_1 = self.closest_point(self.location[city_1], start_1)

            pkgid_2 = self.df2.iloc[i][0]
            ind_stn_2 = int(self.df2.iloc[i][1])
            city_2 = self.df2.iloc[i][2]
            start_2 = (self.location[ind_stn_2][0], self.location[ind_stn_2][1])
            goal_2 = self.closest_point(self.location[city_2], start_2)
            if city_1 == "Mumbai" or city_1 == "Delhi" or city_1 == "Kolkata":
                drop_1 = -45
            else:
                drop_1 = 45
            if city_2 == "Pune" or city_2 == "Ahmedabad" or city_2 == "Jaipur":
                drop_2 = 45
            else:
                drop_2 = -45

            if city_1 == city_2:
                self.city = city_1
                if self.city == city_1 and self.count == 1:
                    goal_2 = (goal_2[0]-180, goal_2[1])
                    drop_2 = -135
                elif city_1 == "Ahmedabad" or city_1 == "Jaipur":
                    goal_1 = (goal_1[0] - 180, goal_1[1])
                    drop_1 = 135
                elif city_2 == "Delhi" or city_2 == "Kolkata":
                    goal_2 = (goal_2[0] - 180, goal_2[1])
                    drop_2 = -135
                self.count = 1
                    
            print("Bot 4 has assigned With the City " + city_1 + " from the induct station 1 to the goal point " + str(goal_1))
            self._goal_handles_4[self.goal_no_4] = self.send_goal_4(ind_stn_1, start_1[0], 
                                                                    start_1[1], goal_1[0], 
                                                                    goal_1[1], city_1, pkgid_1,
                                                                    drop_1)

            print("Bot 2 has assigned With the City " + city_2 + " from the induct station 2 to the goal point " + str(goal_2))
            self._goal_handles_2[self.goal_no_2] = self.send_goal_2(ind_stn_2, start_2[0], 
                                                                    start_2[1], goal_2[0], 
                                                                    goal_2[1], city_2, pkgid_2,
                                                                    drop_2)

            self.goal_no_2 += 1
            self.goal_no_4 += 1

    # Function to identify the closest point
    def closest_point(self, ls, pos):
        """
        This Function will choose the closest point of the destination
        from the current position of the bot.
        """
        x, y = pos
        d = list(map(lambda t: math.sqrt(pow(t[0]-x,2)+pow(t[1]-y,2)),ls))
        min_res = min(d)
        i = d.index(min_res)

        return ls[i]

    # Function to validate point
    def validate_point(self, coord, points):
        """
        This function will validate the point with obstacles of
        its presence and returns the result as 1 or 0
        """
        try:
            points.index(coord)
            flag = 0
        except ValueError:
            flag = 1

        return flag

    # Destructor of the Class
    def __del__(self):
        rospy.loginfo('\033[94m' + "Shutting Down" + '\033[0m')

# Main Function
def main():
    """
    This is the start of execution of this node
    """
    # Initializing the Node
    rospy.init_node('node_client', anonymous=True)

    # Creating Object for the Class Client
    cli = Client()
    try:
        # Spinning the Main Function
        rospy.spin()

    except KeyboardInterrupt:
        rospy.loginfo("Shutting down")

        # Deleting the Created Object if Interrupted
        del cli

        # Destroying all the cv2 Windows Created
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()